{"version":3,"sources":["containers/Home.js","containers/Login.js","containers/Profile.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","Component","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","handleSubmit","preventDefault","loginState","username","state","password","axios","post","then","res","console","log","data","catch","err","length","alert","react_router","to","onSubmit","FormGroup","controlId","bsSize","ControlLabel","FormControl","autoFocus","type","email","onChange","Button","block","disabled","validateForm","name","Routes","path","exact","component","Profile","App","Navbar","fluid","collapseOnSelect","Header","Brand","react_router_dom","Toggle","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.588c641b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Home.css\";\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <div className=\"lander\">\n          <h1>Scratch</h1>\n          <p>A simple note taking app</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport \"./Login.css\";\nimport { Redirect } from 'react-router-dom'\nimport axios from \"axios\";\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      password: \"\",\n      loginState: \"idle\"\n    };\n  }\n\n  validateForm() {\n    return this.state.username.length > 0 && this.state.password.length > 0;\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    this.setState({ loginState: 'loggingIn' })\n\n    const username = this.state.username\n\n    const password = this.state.password\n\n    //const proxyurl = \"http://cors-anywhere.herokuapp.com/\";\n    axios.post(/*proxyurl + 'http://brandi.ipt.pt*/'api/auth', { username, password })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n\n        if(res.data === \"Incorrect Username and/or Password!\"){\n          this.setState({ loginState: 'error' })\n        }else{\n          this.setState({ loginState: 'success' })\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  render() {\n\n    if (this.state.loginState === \"error\") {\n      return (\n        alert(\"Wrong login information\")\n      );  \n    } else if (this.state.loginState === \"success\"){\n      //sessionStorage.setItem(\"username\", this.state.username);\n      return <Redirect to='/profile' />\n    }\n\n    return (\n      <div className=\"Login\">\n        <form onSubmit={this.handleSubmit}>\n          <FormGroup controlId=\"username\" bsSize=\"large\">\n            <ControlLabel>Username</ControlLabel>\n            <FormControl\n              autoFocus\n              type=\"username\"\n              value={this.state.email}\n              onChange={this.handleChange}\n            />\n          </FormGroup>\n          <FormGroup controlId=\"password\" bsSize=\"large\">\n            <ControlLabel>Password</ControlLabel>\n            <FormControl\n              value={this.state.password}\n              onChange={this.handleChange}\n              type=\"password\"\n            />\n          </FormGroup>\n          <Button\n            block\n            bsSize=\"large\"\n            disabled={!this.validateForm()}\n            type=\"submit\"\n          >\n            Login\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Profile.css\";\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name : \"test\"\n    };\n  }\n\n  componentDidMount(){\n    //session.setState({name: sessionStorage.getItem(\"username\")});\n    alert(this.state.name);\n  }\n  /*\n    axios.post('/api/users', { username, password })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n\n        this.setState({loginState: 'success'})\n      })\n      .catch(err => {\n        this.setState({ loginState: 'error'});\n      });*/\n  \n\n  render() {\n\n\n    return (\n      <div className=\"Login\">\n        <h1>PROFILE</h1>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./containers/Home\";\nimport Login from \"./containers/Login\";\nimport Profile from \"./containers/Profile\";\n\nexport default () =>\n  <Switch>\n    <Route path=\"/\" exact component={Home} />\n    <Route path=\"/login\" exact component={Login} />\n    <Route path=\"/profile\" exact component={Profile} />\n  </Switch>;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App container\">\n        <Navbar fluid collapseOnSelect>\n          <Navbar.Header>\n            <Navbar.Brand>\n              <Link to=\"/\">Scratch </Link>\n              <Link to=\"/login\">Login</Link>\n            </Navbar.Brand>\n            <Navbar.Toggle />\n          </Navbar.Header>\n        </Navbar>\n        <Routes />\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n    document.getElementById(\"root\")\n  );\n  \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}